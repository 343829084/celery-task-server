#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from security import SecurityService
from security.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ResultStruct encrypt(string str)')
    print('  ResultStruct decrypt(string str)')
    print('   batchEncrypt( vec)')
    print('   batchDecrypt( vec)')
    print('  ResultListWithFlag batchEncryptWithFlag(string flag,  vec)')
    print('  ResultListWithFlag batchDecryptWithFlag(string flag,  vec)')
    print('  ResultStruct encryptAndBase64(string str)')
    print('  ResultStruct decryptAndBase64(string str)')
    print('   batchEncryptAndBase64( vec)')
    print('   batchDecryptAndBase64( vec)')
    print('  ResultListWithFlag batchEncryptWithFlagAndBase64(string flag,  vec)')
    print('  ResultListWithFlag batchDecryptWithFlagAndBase64(string flag,  vec)')
    print('  ResultStruct encryptUseEcbModel(string str)')
    print('  ResultStruct decryptUseEcbModel(string str)')
    print('   batchEncryptUseEcbModel( vec)')
    print('   batchDecryptUseEcbModel( vec)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = SecurityService.Client(protocol)
transport.open()

if cmd == 'encrypt':
    if len(args) != 1:
        print('encrypt requires 1 args')
        sys.exit(1)
    pp.pprint(client.encrypt(args[0],))

elif cmd == 'decrypt':
    if len(args) != 1:
        print('decrypt requires 1 args')
        sys.exit(1)
    pp.pprint(client.decrypt(args[0],))

elif cmd == 'batchEncrypt':
    if len(args) != 1:
        print('batchEncrypt requires 1 args')
        sys.exit(1)
    pp.pprint(client.batchEncrypt(eval(args[0]),))

elif cmd == 'batchDecrypt':
    if len(args) != 1:
        print('batchDecrypt requires 1 args')
        sys.exit(1)
    pp.pprint(client.batchDecrypt(eval(args[0]),))

elif cmd == 'batchEncryptWithFlag':
    if len(args) != 2:
        print('batchEncryptWithFlag requires 2 args')
        sys.exit(1)
    pp.pprint(client.batchEncryptWithFlag(args[0], eval(args[1]),))

elif cmd == 'batchDecryptWithFlag':
    if len(args) != 2:
        print('batchDecryptWithFlag requires 2 args')
        sys.exit(1)
    pp.pprint(client.batchDecryptWithFlag(args[0], eval(args[1]),))

elif cmd == 'encryptAndBase64':
    if len(args) != 1:
        print('encryptAndBase64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.encryptAndBase64(args[0],))

elif cmd == 'decryptAndBase64':
    if len(args) != 1:
        print('decryptAndBase64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.decryptAndBase64(args[0],))

elif cmd == 'batchEncryptAndBase64':
    if len(args) != 1:
        print('batchEncryptAndBase64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.batchEncryptAndBase64(eval(args[0]),))

elif cmd == 'batchDecryptAndBase64':
    if len(args) != 1:
        print('batchDecryptAndBase64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.batchDecryptAndBase64(eval(args[0]),))

elif cmd == 'batchEncryptWithFlagAndBase64':
    if len(args) != 2:
        print('batchEncryptWithFlagAndBase64 requires 2 args')
        sys.exit(1)
    pp.pprint(client.batchEncryptWithFlagAndBase64(args[0], eval(args[1]),))

elif cmd == 'batchDecryptWithFlagAndBase64':
    if len(args) != 2:
        print('batchDecryptWithFlagAndBase64 requires 2 args')
        sys.exit(1)
    pp.pprint(client.batchDecryptWithFlagAndBase64(args[0], eval(args[1]),))

elif cmd == 'encryptUseEcbModel':
    if len(args) != 1:
        print('encryptUseEcbModel requires 1 args')
        sys.exit(1)
    pp.pprint(client.encryptUseEcbModel(args[0],))

elif cmd == 'decryptUseEcbModel':
    if len(args) != 1:
        print('decryptUseEcbModel requires 1 args')
        sys.exit(1)
    pp.pprint(client.decryptUseEcbModel(args[0],))

elif cmd == 'batchEncryptUseEcbModel':
    if len(args) != 1:
        print('batchEncryptUseEcbModel requires 1 args')
        sys.exit(1)
    pp.pprint(client.batchEncryptUseEcbModel(eval(args[0]),))

elif cmd == 'batchDecryptUseEcbModel':
    if len(args) != 1:
        print('batchDecryptUseEcbModel requires 1 args')
        sys.exit(1)
    pp.pprint(client.batchDecryptUseEcbModel(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
